//minHeap
public class Main {

  int[] arr = new int[8];
  int ind = -1;

  public static void main(String[] args) {
    Main m = new Main();
    m.push(10);
    m.push(11);
    m.push(1);
    m.push(24);
    m.push(2);
    m.push(18);
    m.push(4);
    m.push(3);
    m.traceAll();
    m.print(m.poll());
    m.traceAll();
    m.print(m.poll());
    m.traceAll();
    m.print(m.poll());
    m.traceAll();
    m.print(m.poll());
    m.traceAll();
    m.print(m.poll());
    m.traceAll();
    m.print(m.poll());
    m.traceAll();
    m.print(m.poll());
    m.traceAll();
    m.print(m.poll());
    m.traceAll();
    m.print(m.poll());
    m.traceAll();
    m.print(m.poll());
    m.traceAll();
  }

  public void traceAll() {
    if (ind == -1) {
      System.out.println("No elements");
      return;
    }
    for (int i = 0; i < arr.length; i++) {
      if (arr[i] == 0)
        break;
      System.out.print(arr[i] + ",");
    }
    System.out.println();
  }

  public void print(int val) {
    System.out.println(val);
  }

  public int poll() {
    if (ind == -1) {
      return -1;
    }
    int ans = arr[0];
    arr[0] = arr[ind];
    arr[ind] = 0;
    ind--;
    reverseHeap();
    return ans;
  }

  public void reverseHeap() {
    int index = 0;
    while (hasChild(index)) {
      if ((index * 2 + 1 <= ind && arr[index] > arr[index * 2 + 1])
          || (index * 2 + 2 <= ind && arr[index] > arr[index * 2 + 2])) {
        if (arr[index * 2 + 1] < arr[index * 2 + 2]) {
          swap(index, index * 2 + 1);
          index = index * 2 + 1;
        } else {
          swap(index, index * 2 + 2);
          index = index * 2 + 2;
        }
      } else
        break;
    }
  }

  public boolean hasChild(int index) {
    if (ind < 0) {
      return false;
    }
    return (index * 2 + 1 <= ind && arr[index * 2 + 1] != 0) || (index * 2 + 2 <= ind && arr[index * 2 + 2] != 0);
  }

  public int peek() {
    if (ind == -1) {
      return -1;
    } else {
      return arr[0];
    }
  }

  public void push(int x) {
    arr[++ind] = x;
    heapify();
  }

  public void heapify() {
    while (hasParent(ind)) {
      if (arr[(ind - 1) / 2] > arr[ind]) {
        swap((ind - 1) / 2, ind);
      } else {
        break;
      }
    }
  }

  public void swap(int x, int y) {
    arr[x] = arr[x] + arr[y];
    arr[y] = arr[x] - arr[y];
    arr[x] = arr[x] - arr[y];
  }

  public boolean hasParent(int ind) {
    if (ind <= 0)
      return false;
    return true;
  }

}